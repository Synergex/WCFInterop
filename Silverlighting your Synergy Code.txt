Silverlight: it’s shiny, new, and buzzword compliant. And, aside from all of the hype, it really does make a nice rich Internet 
application (RIA) front-end for your Synergy code. Until recently, you had one option in the world of Synergy remoting: xfServerPlus. 
xfServerPlus does a great job exposing your Synergy code to various .NET, Java, COM, and Synergy clients. But what if your platform 
of choice (Silverlight, AJAX, .NET Compact Framework, Flash, etc.) isn’t directly supported? Well now that we have the Synergy .NET 
assembly API, you have more options. With a little C# voodoo and some .NET assembly API black magic, I’m going to show you how to 
expose and host some Synergy code via the .NET assembly API and Windows Communication Foundation (WCF).

The nice thing about WCF is that you can use it to communicate with almost any client imaginable. WCF uses web standards to 
communicate, and out of the box it lets you choose between SOAP 1.1, SOAP 1.2, and JSON. But wait; there’s more: you can also change 
the transport layer. If HTTP meets your needs, you can choose that, and if bare TCP/IP is what you need, that’s available too. There 
is a huge amount of configurability in WCF, much more than I’ve just mentioned.

Let’s say we have the following rather simple Synergy method, and we want to expose it with the .NET assembly API and WCF:

public method function_one, string
p1, @string
proc
writes(1, p1)
mreturn p1 + " something"
endmethod

To expose this code with WCF, we need .NET callable types that wrap Synergy methods. Rather than take you through the entire process 
of creating this code, I’ve included all of the code and supporting files (Visual Studio project files, etc.) needed for this example 
in a zip file, which you can get here. (This code sample will also be added to CodeExchange.) In this article, I’ll discuss how to 
use this code, and we’ll look at some of the crucial bits that make it all work.

First, we have to define our Synergy method in a way that is easy to parse and manipulate programmatically. I’ve chosen XML with a 
format that looks very much like the output from genxml:

<component>
<interface name='senTest'>
<method name='function_one'>
<methodresult type='System.String'/>
<param name='p1' type='System.String'/>
</method>
</interface>
</component>

I’ve chosen to define the method in this way so that the XML works as input for a C# class called DelegateProxy (included in the 
example code), which binds calls to the Synergy code. DelegateProxy requires the following: an interface tag to define the name of 
the class to be generated, a method tag that matches the name we use in the Synergy code, and a param tag for each parameter. The 
param tag must have a name, and it must have a type that matches the name (case sensitive) of a .NET type. There’s also a return type 
(methodresult), but this can be omitted if the return type is void. You don’t need to know anything more about DelegateProxy (this is 
the voodoo mentioned above), but I’ll summarize the internals for the curious.

<voodoo>

For each method in the XML, DeletegateProxy generates a delegate type at runtime using the classes provided in the 
System.Reflection.Emit namespace. Once DeletegateProxy has a delegate, it triggers the callback into the Synergy code, passing in the 
method name, the delegate type name, and the assembly where the delegate type has been defined. Here’s the code that binds Synergy 
methods into .NET:


public method bind, @object
name, @string
delegateType, @string
delegateDefinedIn, @string
record
ret, @DotNetDelegate
dna, @DotNetAssembly
proc
dna = new DotNetAssembly(delegateDefinedIn)
ret = new DotNetDelegate(dna,
& delegateType, this, name)
mreturn ret
endmethod

So DelegateProxy tells .NET what our method looks like, and it can call our method. All that’s left is to generate a type that knows 
how to call our delegates as though they were regular methods on a class. Again, System.Reflection.Emit enables us to do this (but I 
won’t describe that here since the code is large and as low-level as it gets in .NET).

</voodoo>


Now for the next step: hosting and consuming. The hosting code is pretty simple; we’re going to choose BasicHTTPBinding since that is 
the most commonly supported binding type. And we’re also going to be passing in the address we’ll use to listen for requests. Because 
the WCF hosting code is multi-threaded, we need to make sure that we keep our application running even though one of the 
DelegateProxy methods, DelegateProxy.Run (or proxy.Run, for short), is going to return almost immediately. There are several ways to 
do this. For example, you can use the console to block, or you can set up a sleep. For our example, I chose to use the console, as 
the following code illustrates. (Don’t worry about entering this code. It’s part of the example code supplied with this article. It’s 
included here to illustrate what’s going on.)


binding = new BasicHttpBinding(BasicHttpSecurityMode.None)
proxy.Run((System.ServiceModel.Channels.Binding)binding,
& "http://localhost/service")
open(1,o,'tt:')
reads(1, buf)
close(1)

Now that we’ve surveyed some of the critical bits of code, it’s time to try this out. Grab the example code if you haven’t already 
done so. Note that your system must have Visual Studio 2008 SP1 (any version including Express), the Visual Studio Tools for 
Silverlight 2, and Synergy/DE 9.1.5a.

The files include a pre-built DLL for DelegateProxy and a .dbr file for the Synergy code, go to the subdirectory named prebuilt, and 
run the following to see a completed working example:

dbs senWCFHost

Or, if you want to build it yourself,

1. Open the WCFProxyGenerator project
(\sen\WCFProxyGenerator\WCFProxyGenerator.sln) in Visual Studio.

2. Build the WCFProxyGenerator project.

3. Copy senWCFHost.dbl from the root folder to a folder with WCFProxyGenerator.dll, which is the DLL generated by WCFProxyGenerator. 
(This DLL is built to \sen\WCFProxyGenerator\WCFProxyGenerator\bin\Debug.)

4. In the directory that has senWCFHost.dbl and WCFProxyGenerator.dll, run gennet as follows:

gennet –o lib.dbl WCFProxyGenerator.dll mscorlib System.ServiceModel

5. In the same directory, run the following (in order). Note that you may get a warning (“NEW modifier is required on 
System.Reflection.Emit.OpCodes.Call …”) when you run the dbl commands below. This is expected and does not indicate a problem.

dbl –qrelaxed:interop lib
dblproto lib
dbl senWCFHost.dbl
dblink senWCFHost lib
dbs senWCFHost

Now we need to make a Silverlight application to consume our service. The first step is to make a new project:

1. If you opened the WCFProxyGenerator project, close it.

2. Select File > New > Project.

3. Pick Visual C# as the Project category, choose “Silverlight Application” as the template, specify the name, location, etc., and 
click OK.

4. In the Add Silverlight Application dialog, leave the defaults “Add a new ASP.NET Web project…” and “ASP.NET Web Application 
Project” selected, and click OK. (These defaults tell Visual Studio that the application will be hosted in an ASP.NET session, and 
that’s what we want.)

5. In Solution Explorer, right-click the first project node (the project node that does not end in .Web) and select “Add Service 
Reference” from the Context menu.

6. Enter http://localhost/service as the address of the web service. (The “dbs senWCFHost” command started a web service.) Press Go, 
and then, assuming there are no errors, press OK. (If you do get an error, it may be that the senWCFHost is not running. Use the 
“dbs senWCFHost” command again to start it.)

7. At this point we’ve got a Silverlight project that has a reference to our service, so we just need a UI to trigger our method 
call. Paste the XAML below between the grid tags of the Page.xml for your project.

<TextBox x:Name="input" HorizontalAlignment="Right"
Width="100" Height="30"/>

<Button x:Name="send" Width="80" Height="30"
HorizontalAlignment="Left" Click="send_Click">
<TextBlock>Send</TextBlock></Button>


8. The XAML we just added registers an event handler for the Click event, so we’ll need to implement this in the code-behind file for 
Page.xaml. First, however, we need to add the following to the top of the code-behind file (Page.xaml.cs). Right-click the Page.xaml 
node in Server Explorer, select View Code from the context menu, and then add the following to the top of the Page.xaml.cs file, 
replacing “SilverlightApplication1” with the name of your application:

using SilverlightApplication1.ServiceReference1;

9. Now we need to add the code for the event handlers. Add the following to Page.xaml.cs (under the Page class).

private void send_Click(object sender, RoutedEventArgs e)
{
senTestClient client = new senTestClient();
client.function_oneCompleted += new
EventHandler<function_oneCompletedEventArgs>(
client_function_oneCompleted);

client.function_oneAsync(input.Text);
}

void client_function_oneCompleted(object sender,
function_oneCompletedEventArgs e)
{
input.Text = e.Result;
}

10. Start senWCFHost, if it isn’t still running. Then build the project and run it. If you run in debug mode, you’ll get the 
following message. Leave the “Modify … to enable debugging” option selected. Click OK in this window.

The Silverlight application will open with a Send button and a text field. Type a word in the field and click Send. The application 
sends the text to the running Synergy application (senWCFHost). The Synergy application appends the word “ something” to the text and 
returns the results to the Silverlight application, which displays it in the field.

Now you've seen how we can use the .NET assembly API and WCF to enable a Silverlight application to call Synergy code. And we've 
briefly examined the voodoo (the C# code that bound calls to the Synergy code). In my next SEN article I will go over a few ways to 
make what you see here work on a larger scale.